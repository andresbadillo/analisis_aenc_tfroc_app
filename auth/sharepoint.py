"""
M√≥dulo para interactuar con SharePoint usando Microsoft Graph API.
Adaptado para la aplicaci√≥n de an√°lisis AENC y TFROC.
"""

import streamlit as st
import requests
import os
from config.constants import SHAREPOINT_CONFIG


class SharePointClient:
    """
    Clase para manejar operaciones con SharePoint usando Microsoft Graph API.
    """
    
    def __init__(self, token):
        """
        Inicializa el cliente de SharePoint.
        
        Args:
            token (str): Token de acceso de Azure AD.
        """
        self.token = token
        self.headers = {
            "Authorization": f"Bearer {token}",
            "Accept": "application/json"
        }
        self.site_url = SHAREPOINT_CONFIG['url']
        self.site_name = SHAREPOINT_CONFIG['site']
    
    def get_site_id(self):
        """
        Obtiene el ID del sitio de SharePoint.
        
        Returns:
            str or None: ID del sitio si se encuentra, None en caso contrario.
        """
        try:
            # Obtener informaci√≥n del sitio usando el formato correcto para Microsoft Graph API
            # Formato: https://graph.microsoft.com/v1.0/sites/{hostname}:/sites/{site-name}
            hostname = self.site_url.replace("https://", "").replace("http://", "")
            url = f"https://graph.microsoft.com/v1.0/sites/{hostname}:/sites/{self.site_name}"
            
            st.info(f"üîç Intentando conectar a: {url}")
            
            response = requests.get(url, headers=self.headers)
            
            if response.status_code == 200:
                site_data = response.json()
                site_id = site_data.get('id')
                if site_id:
                    st.success(f"‚úÖ Sitio encontrado: {site_id}")
                    return site_id
                else:
                    st.error("‚ùå No se pudo obtener el ID del sitio")
                    return None
            else:
                st.error(f"‚ùå Error al obtener ID del sitio: {response.status_code}")
                st.error(f"Respuesta: {response.text}")
                
                # Proporcionar informaci√≥n de diagn√≥stico
                if response.status_code == 401:
                    st.error("üîê Error de autenticaci√≥n. Verifica que el token sea v√°lido.")
                elif response.status_code == 403:
                    st.error("üö´ Error de permisos. Verifica que la aplicaci√≥n tenga permisos para acceder al sitio.")
                elif response.status_code == 404:
                    st.error("üîç Sitio no encontrado. Verifica que el nombre del sitio sea correcto.")
                
                return None
                
        except Exception as e:
            st.error(f"‚ùå Error al obtener ID del sitio: {str(e)}")
            return None
    
    def get_folder(self, folder_path):
        """
        Obtiene una carpeta de SharePoint.
        
        Args:
            folder_path (str): Ruta de la carpeta en SharePoint
            
        Returns:
            dict or None: Informaci√≥n de la carpeta si existe, None en caso contrario.
        """
        try:
            site_id = self.get_site_id()
            if not site_id:
                return None
            
            # Obtener informaci√≥n de la carpeta
            url = f"https://graph.microsoft.com/v1.0/sites/{site_id}/drive/root:/{folder_path}"
            response = requests.get(url, headers=self.headers)
            
            if response.status_code == 200:
                return response.json()
            else:
                st.error(f"Error al obtener carpeta {folder_path}: {response.status_code}")
                return None
                
        except Exception as e:
            st.error(f"Error al obtener carpeta {folder_path}: {str(e)}")
            return None
    
    def list_files(self, folder_path):
        """
        Lista archivos en una carpeta de SharePoint.
        
        Args:
            folder_path (str): Ruta de la carpeta en SharePoint
            
        Returns:
            list: Lista de archivos en la carpeta.
        """
        try:
            site_id = self.get_site_id()
            if not site_id:
                return []
            
            # Obtener archivos de la carpeta
            url = f"https://graph.microsoft.com/v1.0/sites/{site_id}/drive/root:/{folder_path}:/children"
            response = requests.get(url, headers=self.headers)
            
            if response.status_code == 200:
                data = response.json()
                return data.get('value', [])
            else:
                st.error(f"Error al listar archivos en {folder_path}: {response.status_code}")
                return []
                
        except Exception as e:
            st.error(f"Error al listar archivos en {folder_path}: {str(e)}")
            return []
    
    def check_files_exist(self, folder_path, prefix):
        """
        Verifica si existen archivos con extensi√≥n .TxF en SharePoint.
        
        Args:
            folder_path (str): Ruta de la carpeta en SharePoint
            prefix (str): Prefijo del archivo (aenc o tfroc)
            
        Returns:
            list: Lista de archivos .TxF encontrados
        """
        files = self.list_files(folder_path)
        txf_files = [
            file['name'] for file in files 
            if file['name'].startswith(prefix) and file['name'].endswith(".TxF")
        ]
        return txf_files
    
    def verify_files_before_download(self, year, month):
        """
        Verifica si ya existen archivos .TxF en SharePoint antes de descargar del FTP
        Retorna True si existen archivos, False si no existen
        """
        try:
            # Convertir month a entero si es string
            if isinstance(month, str):
                month_int = int(month)
            else:
                month_int = month
            
            folder_path = f"Documentos Compartidos/aenc/{year}/{month_int:02d}"
            txf_files = self.check_files_exist(folder_path, "aenc")
            
            if txf_files:
                st.warning(f"üìÅ Archivos .TxF ya existen en SharePoint para {year}-{month_int:02d}")
                st.info(f"Archivos encontrados: {', '.join(txf_files)}")
                return True
            else:
                st.info(f"üìÅ No se encontraron archivos .TxF en SharePoint para {year}-{month_int:02d}")
                st.info("‚úÖ Procediendo con la descarga del FTP...")
                return False
                
        except Exception as e:
            st.error(f"Error al verificar archivos en SharePoint: {e}")
            return False
    
    def upload_file(self, folder_path, file_path, file_name):
        """
        Sube un archivo a SharePoint.
        
        Args:
            folder_path (str): Ruta de la carpeta en SharePoint
            file_path (str): Ruta local del archivo
            file_name (str): Nombre del archivo en SharePoint
            
        Returns:
            bool: True si la subida es exitosa, False en caso contrario
        """
        try:
            site_id = self.get_site_id()
            if not site_id:
                return False
            
            # Leer archivo local
            with open(file_path, "rb") as file:
                file_content = file.read()
            
            # Subir archivo
            url = f"https://graph.microsoft.com/v1.0/sites/{site_id}/drive/root:/{folder_path}/{file_name}:/content"
            headers = {
                "Authorization": f"Bearer {self.token}",
                "Content-Type": "application/octet-stream"
            }
            
            response = requests.put(url, data=file_content, headers=headers)
            
            if response.status_code in [200, 201]:
                st.success(f"‚úÖ Archivo subido: {file_name}")
                return True
            else:
                st.error(f"‚ùå Error al subir {file_name}: {response.status_code}")
                return False
                
        except Exception as e:
            st.error(f"‚ùå Error al subir {file_name}: {str(e)}")
            return False
    
    def upload_files_from_folder(self, folder_path, local_folder, file_names):
        """
        Sube m√∫ltiples archivos desde una carpeta local.
        
        Args:
            folder_path (str): Ruta de la carpeta en SharePoint
            local_folder (str): Carpeta local con los archivos
            file_names (list): Lista de nombres de archivos a subir
            
        Returns:
            int: N√∫mero de archivos subidos exitosamente
        """
        uploaded_count = 0
        progress_bar = st.progress(0)
        
        for i, file_name in enumerate(file_names):
            local_path = os.path.join(local_folder, file_name)
            
            if os.path.exists(local_path):
                if self.upload_file(folder_path, local_path, file_name):
                    uploaded_count += 1
            
            # Actualizar barra de progreso
            progress = (i + 1) / len(file_names)
            progress_bar.progress(progress)
        
        progress_bar.empty()
        return uploaded_count
    
    def clean_files_by_priority(self, folder_path, uploaded_files):
        """
        Limpia archivos en SharePoint seg√∫n la jerarqu√≠a TxF > TxR > Tx2.
        
        Args:
            folder_path (str): Ruta de la carpeta en SharePoint
            uploaded_files (list): Lista de archivos subidos
        """
        try:
            files = self.list_files(folder_path)
            file_names = [file['name'] for file in files]
            
            # Separar archivos por extensi√≥n
            txf_files = [f for f in file_names if f.endswith(".TxF")]
            txr_files = [f for f in file_names if f.endswith(".TxR")]
            tx2_files = [f for f in file_names if f.endswith(".Tx2")]
            
            files_to_delete = []
            
            # Si existen archivos TxF, borrar TxR y Tx2
            if txf_files:
                files_to_delete.extend(txr_files + tx2_files)
            # Si no hay TxF pero hay TxR, borrar solo Tx2
            elif txr_files:
                files_to_delete.extend(tx2_files)
            
            # Borrar archivos seleccionados
            for file_name in files_to_delete:
                try:
                    self.delete_file(folder_path, file_name)
                    st.info(f"üóëÔ∏è Archivo eliminado: {file_name}")
                except Exception as e:
                    st.warning(f"‚ö†Ô∏è No se pudo eliminar {file_name}: {str(e)}")
                    
        except Exception as e:
            st.error(f"‚ùå Error al limpiar archivos: {str(e)}")
    
    def delete_file(self, folder_path, file_name):
        """
        Elimina un archivo de SharePoint.
        
        Args:
            folder_path (str): Ruta de la carpeta en SharePoint
            file_name (str): Nombre del archivo a eliminar
            
        Returns:
            bool: True si la eliminaci√≥n es exitosa, False en caso contrario
        """
        try:
            site_id = self.get_site_id()
            if not site_id:
                return False
            
            url = f"https://graph.microsoft.com/v1.0/sites/{site_id}/drive/root:/{folder_path}/{file_name}"
            response = requests.delete(url, headers=self.headers)
            
            return response.status_code == 204
            
        except Exception as e:
            st.error(f"Error al eliminar archivo {file_name}: {str(e)}")
            return False
    
    def get_folder_path(self, year, month):
        """
        Genera la ruta de la carpeta en SharePoint.
        
        Args:
            year (int): A√±o
            month (str): Mes en formato MM
            
        Returns:
            str: Ruta de la carpeta en SharePoint
        """
        return f"Documentos Compartidos/aenc/{year}/{month}"
    
    def process_month_upload(self, year, month, local_folder="archivos_descargados"):
        """
        Procesa la subida de archivos para un mes espec√≠fico.
        
        Args:
            year (int): A√±o
            month (str): Mes en formato MM
            local_folder (str): Carpeta local con los archivos
            
        Returns:
            bool: True si el proceso es exitoso, False en caso contrario
        """
        folder_path = self.get_folder_path(year, month)
        
        # Verificar si ya existen archivos .TxF
        aenc_txf = self.check_files_exist(folder_path, "aenc")
        if aenc_txf:
            st.warning(f"‚ö†Ô∏è Archivos .TxF ya existen en SharePoint para {year}-{month}. No se subir√°n archivos.")
            return True
        
        # Listar archivos locales
        if not os.path.exists(local_folder):
            st.error(f"‚ùå La carpeta {local_folder} no existe")
            return False
        
        local_files = os.listdir(local_folder)
        
        # Filtrar archivos por mes bas√°ndose en el nombre del archivo
        # Los archivos tienen formato: aencMMDD.TxF o tfrocMMDD.TxF
        # Convertir month a entero si es string y luego formatear
        if isinstance(month, str):
            month_int = int(month)
        else:
            month_int = month
        month_str = f"{month_int:02d}"  # Asegurar formato MM
        
        aenc_files = [f for f in local_files if f.startswith(f"aenc{month_str}")]
        tfroc_files = [f for f in local_files if f.startswith(f"tfroc{month_str}")]
        
        files_to_upload = aenc_files + tfroc_files
        
        if not files_to_upload:
            st.warning(f"‚ö†Ô∏è No se encontraron archivos para el mes {month} en {local_folder}")
            return False
        
        st.info(f"üì§ Subiendo {len(files_to_upload)} archivos a SharePoint...")
        
        uploaded_count = self.upload_files_from_folder(folder_path, local_folder, files_to_upload)
        
        if uploaded_count > 0:
            # Limpiar archivos seg√∫n prioridad
            self.clean_files_by_priority(folder_path, files_to_upload)
            st.success(f"‚úÖ Proceso completado: {uploaded_count} archivos subidos")
            return True
        else:
            st.error("‚ùå No se pudo subir ning√∫n archivo")
            return False
    
    def upload_processed_files(self, year, month, file_content, file_name):
        """
        Sube archivos procesados (CSV) a SharePoint.
        
        Args:
            year (int): A√±o
            month (str): Mes en formato MM
            file_content (bytes): Contenido del archivo
            file_name (str): Nombre del archivo
            
        Returns:
            bool: True si la subida es exitosa, False en caso contrario
        """
        try:
            folder_path = self.get_folder_path(year, month)
            site_id = self.get_site_id()
            if not site_id:
                return False
            
            url = f"https://graph.microsoft.com/v1.0/sites/{site_id}/drive/root:/{folder_path}/{file_name}:/content"
            headers = {
                "Authorization": f"Bearer {self.token}",
                "Content-Type": "application/octet-stream"
            }
            
            response = requests.put(url, data=file_content, headers=headers)
            
            if response.status_code in [200, 201]:
                st.success(f"‚úÖ Archivo procesado subido: {file_name}")
                return True
            else:
                st.error(f"‚ùå Error al subir archivo procesado {file_name}: {response.status_code}")
                return False
                
        except Exception as e:
            st.error(f"‚ùå Error al subir archivo procesado {file_name}: {str(e)}")
            return False
    
    def update_annual_consumption_file(self, year, month, new_data_content):
        """
        Actualiza el archivo de consumo anual en la carpeta fact_consumos.
        
        Args:
            year (int): A√±o
            month (str): Mes en formato MM
            new_data_content (bytes): Contenido del archivo actualizado
            
        Returns:
            bool: True si la actualizaci√≥n es exitosa, False en caso contrario
        """
        try:
            folder_path = "Documentos Compartidos/aenc/fact_consumos"
            file_name = f"consumos_{year}.csv"
            site_id = self.get_site_id()
            if not site_id:
                return False
            
            url = f"https://graph.microsoft.com/v1.0/sites/{site_id}/drive/root:/{folder_path}/{file_name}:/content"
            headers = {
                "Authorization": f"Bearer {self.token}",
                "Content-Type": "application/octet-stream"
            }
            
            response = requests.put(url, data=new_data_content, headers=headers)
            
            if response.status_code in [200, 201]:
                st.success(f"‚úÖ Archivo anual actualizado: {file_name}")
                return True
            else:
                st.error(f"‚ùå Error al actualizar archivo anual {file_name}: {response.status_code}")
                return False
                
        except Exception as e:
            st.error(f"‚ùå Error al actualizar archivo anual {file_name}: {str(e)}")
            return False
    
    def download_file_content(self, folder_path, file_name):
        """
        Descarga el contenido de un archivo desde SharePoint.
        
        Args:
            folder_path (str): Ruta de la carpeta en SharePoint
            file_name (str): Nombre del archivo
            
        Returns:
            bytes or None: Contenido del archivo si la descarga es exitosa, None en caso contrario
        """
        try:
            site_id = self.get_site_id()
            if not site_id:
                return None
            
            url = f"https://graph.microsoft.com/v1.0/sites/{site_id}/drive/root:/{folder_path}/{file_name}:/content"
            response = requests.get(url, headers=self.headers)
            
            if response.status_code == 200:
                return response.content
            else:
                st.error(f"Error al descargar archivo {file_name}: {response.status_code}")
                return None
                
        except Exception as e:
            st.error(f"Error al descargar archivo {file_name}: {str(e)}")
            return None
    
    def test_connection(self):
        """
        Prueba la conexi√≥n con SharePoint.
        
        Returns:
            bool: True si la conexi√≥n es exitosa, False en caso contrario.
        """
        try:
            st.info("üîç Probando conexi√≥n a SharePoint...")
            st.info(f"URL: {self.site_url}")
            st.info(f"Sitio: {self.site_name}")
            
            site_id = self.get_site_id()
            if site_id:
                st.success("‚úÖ Conexi√≥n a SharePoint exitosa")
                return True
            else:
                st.error("‚ùå No se pudo conectar a SharePoint")
                st.info("üí° Posibles soluciones:")
                st.write("1. Verifica que el sitio 'fronterascomerciales' existe en SharePoint")
                st.write("2. Verifica que tu aplicaci√≥n tiene permisos para acceder al sitio")
                st.write("3. Verifica que los permisos de API est√°n configurados correctamente")
                return False
                
        except Exception as e:
            st.error(f"‚ùå Error de conexi√≥n: {str(e)}")
            return False
